   SOONISH?
   --------
   Bugs, failing tests, weirdness
     - 4 tests failing, all related to formatline.rb?
     - Bug: \$alpha prints as $lpha
     - Bug: Can't pass a variable into a function (snapshots/var_into_func)
     - Bug: Comma after function with param (see test_formatting_35)
     - Many identical duplicated tests in test/unit/formatline - see test_formatting_NN
     - Somehow have "def setvar" in two places.
   New tests: 
     - test suite for each import?
     - more "here-doc" style snapshot tests?
   Fix/improve overall structure 
     - Break up FormatLine into pieces: parse_formatting, etc.
     - Hide FormatLine better inside Livetext
x    - Clean up livetext.rb (like rubocop)
x    - Annoying require_relative paths:  ../../.. blah blah
     - Livetext::Parse:: namespace??
     - Miscellaneous "extraneous" requires? (but it breaks without them)
     - Address duplication in code
   ? Get code coverage working with rubycritic
   Reify args/data passing?
     - Better parameter handling for custom dot commands (see: reify args/data)
     - Better parameter handling for custom functions
   Improve UserAPI...
x    - Make it a class, not a module
     - Improve imports -- functionality, duplication, inconsistency, ...
     - All dot-commands into their own module?? (as an "import" or similar)
     - Support function "namespacing" like variables   $$some.func.name
     - More tests
   Bug: dot-space inside block seen as comment (make configurable??)
   Allow turning on/off: formatting, variable interpolation, function interpolation?
   permit # comments on end of (data) line? (configurable?)


   LATERISH?
   ---------
   `.meth? method ending in `? takes a block that may be processed or thrown away (`.else perhaps?)
   `.dump to dump all variables and their values
   Other debugging features
   HTML helper? (in its own library?)
   Add .link, $$link
   `.if and `[.else]?
   Feature to "break" to EOF?
   change from .lt3 to .live
   Create high-level parser?
   automated checking of output file age
   too many variations - transform, process, etc.
   Change predefined function names?? e.g. $$date becomes $$_date
   Debugging command to dump variables
   Add `_raw_args and let `_args honor quotes
   way to set defaults for images, etc.
   Write as pure library in addition to executable
   More support for markdown
   Improve vim syntax files
   Must have sane support for CSS
   Support for Pygments and/or other code processors
   `.pry method?
   `.irb method?
   Exceptions??
   Ruby `$SAFE levels?
   Warn when overriding existing names?
   Comments passed through (e.g. as HTML comments)
   `.run to execute arbitrary Ruby code inline?
   Concept of `.proc (guaranteed to return no value, produce no output)?
   Investigate "common intermediate format" - output renderers all read it
   Document API fully
   Add RDoc
   Create emacs syntax files (Sublime Text? others?)
   .include dir/    # refs dir/main.lt3 ??
   livetext -m
   $$incr ?
   optional extension on .include, etc.?  permit omission of .lt3
   open/close
   .include? which ignores missing files?
   automated output file
   Fix the backtrace testing problem


   MORE LATERISH?
   --------------
   Document: `require `include `copy `mixin `errout and others
   Worry about nesting of elements (probably mostly disallow)
   Think about UTF-8
   `.require with file and sigil parameters
   Think about passing data in (erb replacement)
   Allow custom ending tag on `raw method
   Allow/encourage custom `passthru method?
   Support for gists? arbitrary links? other remote resouces?
   Small libraries for special purposes (books? special Softcover support? blogs? PDF? RMagick?)
   Experiment with idea of special libraries having pluggable output formats (via Ruby mixin?)
   Imagining a lib that can run/test code fragments as part of document generation
   Someday: Support other languages (Elixir, Python, ...)
   Make any/all delimiters configurable


   DONE
   ----
x  Address failing snapshot tests (one at a time?)
x  import command
x  Remove incomplete 'import' code
x  Change ICanHaz to Import
x  Notes for MC on logic (see examples/example1/)
x  Experimental icanhaz command (acts like import) - see also lib/handler, Livetext::Handler
x  Support "namespaced" variables  (`[.set code.font="whatever"])
x  README.lt3 is broken
x  More unit tests for StringParser?
x  mixin as module?
x  verify *empty* error file in snapshots
x  handle_dotcmd - remove rescue
x  More unit tests for FormatLine
x  Integrate stringparser into formatline.rb
x  commas in variable values
x  More unit tests: standard, ...
x  More custom exceptions
x  (ongoing) Better error checking and corresponding tests
x  (ongoing) separate classes for: seek, mixin, include, ...?
x  Special parser for .set var=... and so on?
x  Create module for helpers?
x  Create intra-line parser!
x  Create predefined variables (e.g., `[$_source_file], `$[_line])
x  Create predefined functions (e.g., `[$$_date])
x  System variables are capitalized?
x  Variable (or function) to denote file being processed
x  .variables (for config) or .set with a text body?
x  escape bug  \.this
x  better way to do _include
x  Let .mixin search upward in tree?
x  Add versioning information
x  Think about command line executable
x  Package as gem
x  Support quotes in `.set values
x  Support functions (``$$func)
x  Ignore first blank line after `[.end]? (and after raw-tag?)
x  Bug: underscore in code (inline) causes italics
x  way to install plugins
